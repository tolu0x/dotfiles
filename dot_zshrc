# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"


# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    zsh-autosuggestions
    zsh-syntax-highlighting
    rust
    ssh-agent
)
source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

###################################
#      exclusive settings
###################################
# vi mode
bindkey -v
export KEYTIMEOUT=1

# Editor
export EDITOR=nvim
export VISUAL=nvim

## Editing command line in vim
autoload -z edit-command-line
zle -N edit-command-line
bindkey -M  vicmd v edit-command-line

# Keybindings
bindkey  "^[[H"   beginning-of-line
bindkey  "^[[F"   end-of-line
bindkey  "^[[3~"  delete-char


export ETH_RPC=https://eth-mainnet.g.alchemy.com/v2/lEpTSwQUtLDqkw-F_qTai5sniT-ZpyZ7
export OP_RPC=https://opt-mainnet.g.alchemy.com/v2/lEpTSwQUtLDqkw-F_qTai5sniT-ZpyZ7

###################################
#    Exporting Paths
###################################
export PATH="$HOME/.local/bin:$PATH"

###################################
#     Aliases
###################################

## Universal
# alias iconfig="nvim ~/.config/i3/config"
# alias qconfig="nvim ~/.config/qtile/config.py"
# alias alconfig="nvim ~/.config/alacritty/alacritty.yml"
# alias wezconfig="nvim ~/.config/wezterm/wezterm.lua"
alias ls="eza"
alias cat="bat"
alias vv="nvim"
alias ss="htop"
alias neodir="cd ~/.local/share/chezmoi/dot_config/nvim/"
alias zsrc="source .zshrc"
alias xx="exit"
alias c="clear"

## git
alias g="git"
alias gs="git status"
alias gsl="git stash list"
alias gc="git checkout"
alias gcp="git cherry-pick"
alias gb="git branch"
alias guc="git reset HEAD~"
alias gp="git fetch origin --prune"

alias h="history"
alias ch='history | grep "git commit"'
alias lg='lazygit'
alias cz="chezmoi"
alias cza="chezmoi add"

# clean up branches that no longer exist on origin off local
alias cb="git remote prune origin && git branch -vv | grep '\[[^]]* gone]' | awk '{ print $1 }' | xargs git branch -D"


# Project helpers
alias ..='cd ../'                      # Go back 1 directory level
alias ...='cd ../../'                  # Go back 2 directory levels
alias .3='cd ../../../'                # Go back 3 directory levels
alias .4='cd ../../../../'             # Go back 4 directory levels
alias .5='cd ../../../../../'          # Go back 5 directory levels
alias .6='cd ../../../../../../'       # Go back 6 directory levels
alias path='echo -e ${PATH//:\\\n}'    # Echo all executable Paths


# Cargo
alias cg="cargo"
alias stone="cargo +nightly fmt -- && cargo +nightly clippy --all --all-features -- -D warnings"
alias rock="cargo +nightly fmt"

# Reth development
alias rethtest='cargo nextest run --locked --all-features --workspace --exclude examples --exclude ef-tests -E '\''kind(lib)'\'' -E '\''kind(bin)'\'' -E '\''kind(proc-macro)'\'
alias rethfmt='cargo +nightly fmt --all'
alias rethlint='rethfmt && rethclip'
alias rethclip='cargo +nightly clippy --all --all-features -- -A clippy::incorrect_clone_impl_on_copy_type -A clippy::arc_with_non_send_sync'

# PNPM
alias p="pnpm"
alias pdev="pnpm dev"

# Tmux
function t {
    if [ -n "$1" ]; then
        tmux new -s "$1"
    else
        tmux new -s code
    fi
}

# Delta
alias diff="delta"


###################################
#         Tmux
###################################
alias tnew="tmux new -s"
alias tls="tmux ls"
alias trename="tmux rename-session -t"
alias ta="tmux a -t"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Forge shortcuts
ft() {
    if [ $# -ge 1 ]; then
        forge test "$@"
    else
        forge test
    fi
}
ftt() {
    if [ $# -ge 1 ]; then
        forge test --match-test "$@"
    fi
}
ftc() {
    if [ $# -ge 1 ]; then
        forge test --match-contract "$@"
    fi
}
# Forge ETH RPCs
rpc() {
    if [ "$1" = "eth" ]; then
        export ETH_RPC_URL=$ETH_RPC
    elif [ "$1" = "op" ]; then
        export ETH_RPC_URL=$OP_RPC
    else
        export ETH_RPC_URL=""
    fi
}

# Search through all PRs that are open in the current repo and check the selected one out locally.
alias prc="GH_FORCE_TTY=100% gh pr list -L 1000 | fzf --ansi --preview 'GH_FORCE_TTY=100% gh pr view {1}' --preview-window down --header-lines 3 | cut -d' ' -f1 | tr -d '#' | xargs gh pr checkout"

# Search through all PRs that are open in the current repo and open the selected one in browser.
alias prv="GH_FORCE_TTY=100% gh pr list -L 1000 | fzf --ansi --preview 'GH_FORCE_TTY=100% gh pr view {1}' --preview-window down --header-lines 3 | cut -d' ' -f1 | tr -d '#' | xargs gh pr view -w"

# Search through all PRs that are open in the current repo and that I'm requested to review and
# open the selected one in browser.
alias prr="GH_FORCE_TTY=100% gh pr list --search 'user-review-requested:@me' | fzf --ansi --preview 'GH_FORCE_TTY=100% gh pr view {1}' --preview-window down --header-lines 3 | cut -d' ' -f1 | tr -d '#' | xargs gh pr view -w"

# Open the repo in-browser
repo() {
    if type gh &> /dev/null; then
        gh repo view -w
    else
        echo "gh is not installed"
    fi
}

# Open the github TUI
ghd() {
    if type gh &> /dev/null; then
        gh dash
    else
        echo "gh is not installed"
    fi
}

# Search through all PRs that meet a supplied filter and open the selected one in browser.
prf() {
    if type gh &> /dev/null; then
        if [ $# -eq 1 ]; then
            GH_FORCE_TTY=100% gh pr list --search $@ | fzf --ansi --preview 'GH_FORCE_TTY=100% gh pr view {1}' --preview-window down --header-lines 3 | cut -d' ' -f1 | tr -d '#' | xargs gh pr view -w
        else
            echo "Filter arguments are required."
        fi
    else
        echo "gh is not installed"
    fi
}

# Clipboard
xc() {
    if [ $(uname) = "Darwin" ]; then
        pbcopy
    else
        xclip -selection clipboard
    fi
}

# export PNPM_HOME="/Users/ben/Library/pnpm"
# case ":$PATH:" in
#   *":$PNPM_HOME:"*) ;;
#   *) export PATH="$PNPM_HOME:$PATH" ;;
# esac
# pnpm end

. "$HOME/.cargo/env"

export GPG_TTY=$(tty)
gpg-connect-agent updatestartuptty /bye >/dev/null

setopt auto_cd


eval "$(hub alias -s)"

# hub completions
fpath=(~/.zsh/completions $fpath) 
autoload -U compinit && compinit
export PATH="/home/gage/.local/share/solana/install/active_release/bin:$PATH"

# bun completions
[ -s "/home/gage/.bun/_bun" ] && source "/home/gage/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
source ~/powerlevel10k/powerlevel10k.zsh-theme
